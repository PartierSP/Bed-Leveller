' Gambas class file

Public iBedSizeX As Integer
Public iBedSizeY As Integer
Public iMargin As Integer
Public sInitialization As New String[4]
Public sHome As String
Public sRapidMove As String
Public sLinearMove As String
Public iRapidPlane As Integer
Public sSetBedTemp As String
Public sBedTempPrefix As String
Public sSetHETemp As String
Public sHETempPrefix As String
Public iBedTemp As Integer
Public iHETemp As Integer
Public fShim As Float
Public fRetraction As Float
Public sPort As String
Public iBaud As Integer
Public iDataBits As Integer
Public iStopBits As Integer
Public sParity As String
Public sFlowControl As String
Public iCleanHeight As Integer
Public sCleanLoc As String
Public sConfigLoc As String = User.Home &/ ".config/leveller"
Public sConfigName As String = "config.conf"
Public bFirstRun As Boolean
Public sGetTemperatures As String
Public sGetPosition As String
Public sMessage As String
Public sDwell As String
Public sAbsolute As String
Public sRelative As String
Public iMaxJogSpeed As Integer
Public bBusy As Boolean = False
Public iFeedrateDivider As Integer = 20

'Public jsk1 As Joystick
Public bButtonDown As New Boolean[13]

Public Sub SerialPort3D_Read()

  Dim strReceived As String
  Dim strRec As New String[4]
  Dim i As Integer

  'Small pause to allow full line to be buffered
  Sleep 0.01

  Try Read #SerialPort3D, strReceived, Lof(SerialPort3D)
  If Error Then
    strReceived = ""
  Else
    Debug strReceived
    strRec = Split(strReceived, "\n")
    For i = 0 To strRec.Length - 1
      strReceived = strRec[i]
      Select Left(strReceived, 4)
        Case "ok X"
          'Got a position reading
          ReadPosition(strReceived) 
        Case "ok T"
          'Got a temperature reading
          ReadTemperature(strReceived)
        Case Else
          Select Left(strReceived, 2)
            Case " T"
              strReceived = "ok" & strReceived
              ReadTemperature(strReceived)
            Case "X:"
              strReceived = "ok " & strReceived
              ReadPosition(strReceived)
            Case Else
'              TextArea1.Text = TextArea1.Text & strReceived
          End Select 
      End Select
    Next
  Endif

Catch
  Me.Text = Error.Text

End

Public Sub SendSerialData(strMessage As String, blnLF As Boolean)

  If blnLF Then
    strMessage &= gb.Lf
  Endif
  SerialPort3D.Begin()
  Write #SerialPort3D, strMessage
  SerialPort3D.Send()

Catch
  Me.Text = Error.Text

End

Public Sub Form_Open()

  Dim hSettings As Settings

  'Load settings
  hSettings = New Settings(sConfigLoc &/ sConfigName)

  iBedSizeX = hSettings["BedSize/BedSizeX", 0]
  iBedSizeY = hSettings["BedSize/BedSizeY", 0]

  sInitialization[1] = hSettings["Post/Init1", "G21 G90 T0"]
  sInitialization[2] = hSettings["Post/Init2", "G92 E0"]
  sInitialization[3] = hSettings["Post/Init3", ""]
  sHome = hSettings["Post/Home", "G28"]
  sRapidMove = hSettings["Post/RapidMove", "G0"]
  sLinearMove = hSettings["Post/Linear", "G1"]
  sSetBedTemp = hSettings["Post/SetBedTemp", "M140"]
  sBedTempPrefix = hSettings["Post/BedTempPrefix", "S"]
  sSetHETemp = hSettings["Post/SetHETemp", "M104"]
  sHETempPrefix = hSettings["Post/HETempPrefix", "S"]
  sGetTemperatures = hSettings["Post/GetTemperatures", "M105"]
  sGetPosition = hSettings["Post/GetPosition", "M114"]
  sMessage = hSettings["Post/Message", "M117"]
  sDwell = hSettings["Post/Dwell", "G4"]
  sAbsolute = hSettings["Post/Absolute", "G90"]
  sRelative = hSettings["Post/Relative", "G91"]

  iMargin = hSettings["Locations/Margin", 30]
  iRapidPlane = hSettings["Locations/RapidPlane", 10]
  fShim = hSettings["Locations/Shim", 0.2]
  iBedTemp = hSettings["Locations/BedTemp", 60]
  iHETemp = hSettings["Locations/HETemp", 200]
  iCleanHeight = hSettings["Locations/CleanHeight", 200]
  sCleanLoc = hSettings["Locations/CleanLoc", "Middle"]
  fRetraction = hSettings["Locations/Retraction", 2]
  iMaxJogSpeed = hSettings["Locations/MaxJogSpeed", 4000]

  sPort = hSettings["Communications/Port", "/dev/ttyUSB0"]
  iBaud = hSettings["Communications/Baud", 115200]
  iDataBits = hSettings["Communications/DataBits", 8]
  iStopBits = hSettings["Communications/StopBits", 1]
  sParity = hSettings["Communications/Parity", "None"]
  sFlowControl = hSettings["Communications/FlowControl", "None"]

  hSettings.Read(Me, "MainForm")
  hSettings.Read(vsMain, "MainFormVSMain")

  bFirstRun = hSettings["System/FirstRun", True]  'If this setting isn't found, set First Run to True until OK is clicked on fSettings.

  If bFirstRun = True Then 
    btnHome.Enabled = False
    Message.Warning("Welcome to Bed Leveller.  Please configure all settings before continuing.")
    FSettings.Show
  Else
    With SerialPort3D
      .PortName = sPort
      .Speed = iBaud
      .DataBits = iDataBits
      .StopBits = iStopBits
      Select sParity
        Case "None"
          .Parity = SerialPort.None
        Case "Odd"
          .Parity = SerialPort.Odd
        Case "Event"
          .Parity = SerialPort.Even
      End Select
      Select sFlowControl
        Case "None"
          .FlowControl = SerialPort.None
        Case "Hardware"
          .FlowControl = SerialPort.Hardware
        Case "Software"
          .FlowControl = SerialPort.Software
        Case "Both"
          .FlowControl = SerialPort.Both
      End Select
    End With

    'Update Location button names
    UpdateButtonNames
    
'    'Start joystick
'    jsk1 = New Joystick(Me, "/dev/input/js0")

    Try serialPort3D.Open()
    If Error Then
      btnHome.Enabled = False
      Message.Warning("Printer not found.  Check settings/connection and try again.")
      FSettings.Show
      FSettings.TabStrip1.Index = 2
    Else
      btnHome.Enabled = True
    Endif
  Endif 

End

Public Sub Form_Close()

  Dim hSettings As Settings

  'Save Window size/location settings
  hSettings = New Settings(sConfigLoc &/ sConfigName)
  hSettings["BedSize/BedSizeX"] = iBedSizeX
  hSettings["BedSize/BedSizeY"] = iBedSizeY

  hSettings["Post/Init1"] = sInitialization[1]
  hSettings["Post/Init2"] = sInitialization[2]
  hSettings["Post/Init3"] = sInitialization[3]
  hSettings["Post/Home"] = sHome
  hSettings["Post/RapidMove"] = sRapidMove
  hSettings["Post/Linear"] = sLinearMove
  hSettings["Post/SetBedTemp"] = sSetBedTemp
  hSettings["Post/BedTempPrefix"] = sBedTempPrefix
  hSettings["Post/SetHETemp"] = sSetHETemp
  hSettings["Post/HETempPrefix"] = sHETempPrefix
  hSettings["Post/GetTemperatures"] = sGetTemperatures
  hSettings["Post/GetPosition"] = sGetPosition
  hSettings["Post/Message"] = sMessage
  hSettings["Post/Dwell"] = sDwell
  hSettings["Post/Absolute"] = sAbsolute
  hSettings["Post/Relative"] = sRelative

  hSettings["Locations/Margin"] = iMargin
  hSettings["Locations/RapidPlane"] = iRapidPlane
  hSettings["Locations/Shim"] = fShim
  hSettings["Locations/BedTemp"] = iBedTemp
  hSettings["Locations/HETemp"] = iHETemp
  hSettings["Locations/CleanHeight"] = iCleanHeight
  hSettings["Locations/CleanLoc"] = sCleanLoc
  hSettings["Locations/Retraction"] = fRetraction
  hSettings["Locations/MaxJogSpeed"] = iMaxJogSpeed

  hSettings["Communications/Port"] = sPort
  hSettings["Communications/Baud"] = iBaud
  hSettings["Communications/DataBits"] = iDataBits
  hSettings["Communications/StopBits"] = iStopBits
  hSettings["Communications/Parity"] = sParity
  hSettings["Communications/FlowControl"] = sFlowControl

  hSettings.Write(Me, "MainForm")
  hSettings.Write(vsMain, "MainFormVSMain")

  ''Turn off heated bed and hot end prior to exiting program
  'SendSerialData(sSetBedTemp & sBedTempPrefix & "0.0", True)
  'SendSerialData(sSetHETemp & sHETempPrefix & "0.0", True)

  SerialPort3D.Close()
  
  jsk1.Close

  FSettings.Close

End

Public Sub btnHome_Click()

  ComBusy

  ResetBtnColors()

  'sHome Printer
  SendSerialData(Chr$(13), True)    'First communication sometimes results in error.  Sending a blank line lets this fault occure on this non-critial line.
  SendSerialData(sMessage & " Homing...", True)
  SendSerialData(sInitialization[1], True)
  SendSerialData(sInitialization[2], True)
  SendSerialData(sInitialization[3], True)
  SendSerialData(sHome, True)
  SendSerialData(sDwell, True)
  SendSerialData(sMessage & " Ready.", True)

  ComFree

  btnLoc1.Enabled = True
  btnLoc2.Enabled = True
  btnLoc3.Enabled = True
  btnLoc4.Enabled = True
  btnLoc5.Enabled = True
  btnClean.Enabled = True
  tgbBed.Enabled = True
  tgbHotEnd.Enabled = True

  btnHome.Background = Color.SelectedBackground
  btnHome.Foreground = Color.SelectedForeground

End

Public Sub btnLoc1_Click()

  ComBusy
  ResetBtnColors()

  'Move to -X,+Y position
  SendSerialData(sMessage & " Moving...", True)
  SendSerialData(sRapidMove & "Z" & iRapidPlane, True)
  SendSerialData(sRapidMove & "X" & iMargin & "Y" & (iBedSizeY - iMargin), True)
  SendSerialData(sRapidMove & "Z" & fShim, True)
  SendSerialData(sDwell, True)
  SendSerialData(sMessage & " Use " & fShim & " shim to set.", True)

  btnLoc1.Background = Color.SelectedBackground
  btnLoc1.Foreground = Color.SelectedForeground

  ComFree

End

Public Sub btnLoc2_Click()

  ComBusy

  ResetBtnColors()

  'Move to +X,+Y position
  SendSerialData(sMessage & " Moving...", True)
  SendSerialData(sRapidMove & "Z" & iRapidPlane, True)
  SendSerialData(sRapidMove & "X" & (iBedSizeX - iMargin) & "Y" & (iBedSizeY - iMargin), True)
  SendSerialData(sRapidMove & "Z" & fShim, True)
  SendSerialData(sDwell, True)
  SendSerialData(sMessage & " Use " & fShim & " shim to set.", True)

  btnLoc2.Background = Color.SelectedBackground
  btnLoc2.Foreground = Color.SelectedForeground

  ComFree
  
End

Public Sub btnLoc3_Click()

  ComBusy

  ResetBtnColors()

  'Move to -X,-Y position
  SendSerialData(sMessage & " Moving...", True)
  SendSerialData(sRapidMove & "Z" & iRapidPlane, True)
  SendSerialData(sRapidMove & "X" & iMargin & "Y" & iMargin, True)
  SendSerialData(sRapidMove & "Z" & fShim, True)
  SendSerialData(sDwell, True)
  SendSerialData(sMessage & " Use " & fShim & " shim to set.", True)

  btnLoc3.Background = Color.SelectedBackground
  btnLoc3.Foreground = Color.SelectedForeground

  ComFree

End

Public Sub btnLoc4_Click()

  ComBusy

  ResetBtnColors()

  'Move to +X,-Y position
  SendSerialData(sMessage & " Moving...", True)
  SendSerialData(sRapidMove & "Z" & iRapidPlane, True)
  SendSerialData(sRapidMove & "X" & (iBedSizeX - iMargin) & "Y" & iMargin, True)
  SendSerialData(sRapidMove & "Z" & fShim, True)
  SendSerialData(sDwell, True)
  SendSerialData(sMessage & " Use " & fShim & " shim to set.", True)

  btnLoc4.Background = Color.SelectedBackground
  btnLoc4.Foreground = Color.SelectedForeground

  ComFree

End

Public Sub btnLoc5_Click()

  ComBusy

  ResetBtnColors()

  'Move to centre of the bed
  SendSerialData(sMessage & " Moving...", True)
  SendSerialData(sRapidMove & "Z" & iRapidPlane, True)
  SendSerialData(sRapidMove & "X" & (iBedSizeX / 2) & "Y" & (iBedSizeY / 2), True)
  SendSerialData(sRapidMove & "Z" & fShim, True)
  SendSerialData(sDwell, True)
  SendSerialData(sMessage & " Use " & fShim & " shim to set.", True)

  btnLoc5.Background = Color.SelectedBackground
  btnLoc5.Foreground = Color.SelectedForeground

  ComFree

End

Public Sub btnSetting_Click()

  'Open Settings form
  FSettings.Show

End

' Public Sub TextArea1_Change()
' 
'   TextArea1.Pos = Len(TextArea1.Text)
' 
' End

Public Sub tgbBed_Click()

  ComBusy

  If tgbBed.Value = True Then
    'Turn on heated bed
    SendSerialData(sSetBedTemp & sBedTempPrefix & iBedTemp, True)
    tgbBed.Text = "&Bed On"
  Else
    'Turn off heated bed
    SendSerialData(sSetBedTemp & sBedTempPrefix & "0.0", True)
    tgbBed.Text = "&Bed Off"
  Endif

  ComFree

End

Public Sub tgbHotEnd_Click()

  ComBusy

  If tgbHotEnd.Value == True Then
    'Turn on heated bed
    SendSerialData(sSetHETemp & sHETempPrefix & iHETemp, True)
    tgbHotEnd.Text = "Hot &End On"
  Else
    'Turn off heated bed
    SendSerialData(sSetHETemp & sHETempPrefix & "0.0", True)
    tgbHotEnd.Text = "Hot &End Off"
  Endif

  ComFree

End

Public Sub UpdateButtonNames()

  btnLoc1.Text = "X" & Str(iMargin) & " Y" & Str(iBedSizeY - iMargin)
  btnLoc2.Text = "X" & Str(iBedSizeX - iMargin) & " Y" & Str(iBedSizeY - iMargin)
  btnLoc3.Text = "X" & Str(iMargin) & " Y" & Str(iMargin)
  btnLoc4.Text = "X" & Str(iBedSizeX - iMargin) & " Y" & Str(iMargin)
  btnLoc5.Text = "X" & Str(iBedSizeX / 2) & " Y" & Str(iBedSizeY / 2)

End

Public Sub Form_Resize()

  If Me.Width < 400 Then
    Me.Width = Me.Width + 15
  Endif

  If Me.Height < 300 Then
    Me.Height = Me.height + 15
  Endif

End

Public Sub tmrResize_Timer()

  Form_Resize

End

Public Sub btnClean_Click()

  ComBusy

  ResetBtnColors()

  SendSerialData(sMessage & " Moving...", True)
  Select sCleanLoc
    Case "Home"
      'Move to Home Clean position
      SendSerialData(sRapidMove & "Z" & iCleanHeight, True)
      SendSerialData(sRapidMove & "X0 Y0", True)

    Case "Left"
      'Move to Left Clean position
      SendSerialData(sRapidMove & "Z" & iCleanHeight, True)
      SendSerialData(sRapidMove & "X" & iMargin & "Y" & iMargin, True)

    Case "Middle"
      'Move to Middle Clean position
      SendSerialData(sRapidMove & "Z" & iCleanHeight, True)
      SendSerialData(sRapidMove & "X" & (iBedSizeX / 2) & "Y" & iMargin, True)

    Case "Right"
      'Move to +X,-Y position
      SendSerialData(sRapidMove & "Z" & iCleanHeight, True)
      SendSerialData(sRapidMove & "X" & (iBedSizeX - iMargin) & "Y" & iMargin, True)
  End Select

  'Perform a retract if Hot End is >90% of iHETemp
  If Val(LCDHotEnd.Text) > (0.9 * iHETemp) Then
    SendSerialData(sRapidMove & "E" & "-" & fRetraction, True)
  Endif

  SendSerialData(sDwell, True)
  SendSerialData(sMessage & " Clean/inspect nozzle.", True)

  btnClean.Background = Color.SelectedBackground
  btnClean.Foreground = Color.SelectedForeground

  ComFree

  'Incase an axis gets bumped during cleaning, force rehoming printer
  btnLoc1.Enabled = False
  btnLoc2.Enabled = False
  btnLoc3.Enabled = False
  btnLoc4.Enabled = False
  btnLoc5.Enabled = False
  btnClean.Enabled = False
  btnHome.Enabled = True

End

Public Sub ReadTemperature(strReceived As String)

  ' Temperature lines from printers contain the following:
  '     - Hot end temperature [###.#0]
  '     - Hot end temperature set point [###.#0]
  '     - Bed temperature reading [###.#0]
  '     - Bed temperature set point [###.#0]
  '     - Hot end power level [###]
  '     - Bed power level [###]
  '
  ' Chamber temperatures currently not supported / tested
  '
  ' Sample of a temperature line sent from printer is as following:
  ' "ok  T:19.96 /0.00 B:20.08 /0.00 @:0 B@:0 "
  '      \/\   / |\  / \/\   / |\  / \/| \ /|
  '      |  \ /  | \/   | \ /  | \/   ||  | |
  '      |   |   |  |   |  |   |  |   ||  |  --- Bed power level (0~127)
  '      |   |   |  |   |  |   |  |   ||   --- Bed power header
  '      |   |   |  |   |  |   |  |   | --- Hot end power level (0~127)
  '      |   |   |  |   |  |   |  |    --- Hot end power header
  '      |   |   |  |   |  |   |   ---Bed temperature setting
  '      |   |   |  |   |  |    --- Bed temperature setting header
  '      |   |   |  |   |   --- Current bed temperature reading
  '      |   |   |  |    --- Current bed temerature header
  '      |   |   |   --- Hot end temperature setting
  '      |   |    --- Hot end temperature setting header
  '      |    --- Current hot end temperature reading
  '       --- Current hot end temperature header

  Dim sTemp As New String[6]
  Dim i As Integer
  
  'Remove ending cruff
  While (Right(strReceived, 1) > "9") Or (Right(strReceived, 1) < "0")
    strReceived = Left(strReceived, -1)
    If strReceived = "" Then
      Exit 
    Endif
  Wend

  'Split temperature data into an array
  sTemp = Split(strReceived, " ")

  'Clean array
  For i = 1 To sTemp.Length - 1
    'Remove starting cruff
    While ((Left(sTemp[i], 1) > "9") Or (Left(sTemp[i], 1) < "0")) And (Len(sTemp[i]) > 0)
      sTemp[i] = Right(sTemp[i], -1)
    Wend
    'Update displays
    'Use Select in case we didn't recieve an entire temperture line to avoid Out Of Bounds error
    Select i
      Case 1
        LCDHotEnd.Text = Format(Val(sTemp[1]), "0##.0")
      Case 2
        LBHotEnd.Text = "Hot E(" & Format(sTemp[2], "0") & ")"
      Case 3
        LCDBed.Text = Format(Val(sTemp[3]), "0##.0")
      Case 4
        LBBed.Text = "Bed (" & Format(sTemp[4], "0") & ")"
      Case 5
        PBHotEnd.Value = Val(sTemp[5]) / 127
      Case 6
        PBBed.Value = Val(sTemp[6]) / 127
    End Select
  Next

  'Gradually change color of LCD's to red the hotter they get
  If Val(LCDHotEnd.Text) > 30 Then
    i = (Int(Val(LCDHotEnd.Text)) - 30) * 2
    If i > 255 Then i = 255
    i = i * &H10000&
    LCDHotEnd.Foreground = i
  Else 
    LCDHotEnd.Foreground = 0    'Black
  Endif

  If Val(LCDBed.Text) > 20 Then
    i = (Int(Val(LCDBed.Text)) - 20) * 4
    If i > 255 Then i = 255
    i = i * &H10000&
    LCDBed.Foreground = i
  Else 
    LCDBed.Foreground = 0   'Black
  Endif
End

Public Sub ReadPosition(strReceived As String)
  
  Dim sPos As New String[6]
  Dim i As Integer
  
  'Remove ending cruff
  While (Right(strReceived, 1) > "9") Or (Right(strReceived, 1) < "0")
    strReceived = Left(strReceived, -1)
  Wend
  
  sPos = Split(strReceived, " ")
  
  For i = 1 To sPos.Length - 1
    'Remove starting cruff
    While ((Left(sPos[i], 1) > "9") Or (Left(sPos[i], 1) < "0")) And (Len(sPos[i]) > 0)
      sPos[i] = Right(sPos[i], -1)
    Wend
    'Update displays
    'Use Select in case we didn't recieve an entire temperture line to avoid Out Of Bounds error
    Select i
      Case 1
        LCDX.Text = "X " & Format(Val(sPos[1]), "0##.0")
      Case 2
        LCDY.Text = "Y " & Format(Val(sPos[2]), "0##.0")
      Case 3
        LCDZ.Text = "Z " & Format(Val(sPos[3]), "0##.0")
      Case 4
        LCDE.Text = "E " & Format(Val(sPos[4]), "0##.0")
    End Select
  Next

End


Public Sub ResetBtnColors()

  btnClean.Background = -1
  btnHome.Background = -1
  btnLoc1.Background = -1
  btnLoc2.Background = -1
  btnLoc3.Background = -1
  btnLoc4.Background = -1
  btnLoc5.Background = -1
  btnClean.Foreground = -1
  btnHome.Foreground = -1
  btnLoc1.Foreground = -1
  btnLoc2.Foreground = -1
  btnLoc3.Foreground = -1
  btnLoc4.Foreground = -1
  btnLoc5.Foreground = -1

End

Public Sub tmrGetTemp_Timer()

  tmrGetTemp.Enabled = False

  'Delay getting temperature if busy
  While bBusy = True
    Wait
  Wend

  ComBusy

  SendSerialData(sGetTemperatures, True)
  SendSerialData(sGetPosition, True)
  tmrGetTemp.Enabled = True

  ComFree

End

Public Sub ComBusy()
  
  bBusy = True
  btnLoc1.Tag = btnLoc1.Enabled
  btnLoc1.Enabled = False
  btnLoc2.Tag = btnLoc2.Enabled
  btnLoc2.Enabled = False
  btnLoc3.Tag = btnLoc3.Enabled
  btnLoc3.Enabled = False
  btnLoc4.Tag = btnLoc4.Enabled
  btnLoc4.Enabled = False
  btnLoc5.Tag = btnLoc5.Enabled
  btnLoc5.Enabled = False
  btnClean.Tag = btnClean.Enabled
  btnClean.Enabled = False
  btnHome.Tag = btnHome.Enabled
  btnHome.Enabled = False
  tgbBed.Tag = tgbBed.Enabled
  tgbBed.Enabled = False
  tgbHotEnd.Tag = tgbHotEnd.Enabled
  tgbHotEnd.Enabled = False
  
End

Public Sub ComFree()
  
  btnLoc1.Enabled = btnLoc1.Tag
  btnLoc2.Enabled = btnLoc2.Tag
  btnLoc3.Enabled = btnLoc3.Tag
  btnLoc4.Enabled = btnLoc4.Tag
  btnLoc5.Enabled = btnLoc5.Tag
  btnClean.Enabled = btnClean.Tag
  btnHome.Enabled = btnHome.Tag
  tgbBed.Enabled = tgbBed.Tag
  tgbHotEnd.Enabled = tgbHotEnd.Tag
  bBusy = False
  
End


Public Sub Jog()

  Dim fDistance As Float
  Dim iFeedRate As Integer
  Dim fAxisMultiplier As Float

  If Left(tgbJog.Tag, 1) = "Z" Then 
    fAxisMultiplier = 0.25
  Else 
    fAxisMultiplier = 1
  Endif

  iFeedRate = Int(iMaxJogSpeed / iFeedrateDivider * fAxisMultiplier)
  fDistance = Round(iFeedRate * tmrJog.Delay / 60000 * 0.75, -1)  ' Distance Traveled(mm) = Feedrate (mm/min) * time (ms) / unit conversion(ms/min) Note: the 0.5 is to account for printer acceleration
  
  ResetBtnColors()
  tmrJog.Enabled = True
  SendSerialData(sLinearMove & tgbJog.Tag & fDistance & "F" & iFeedRate, True)
  'SendSerialData(sGetPosition, True)
  If iFeedrateDivider > 1 Then 
    'Go faster next time
    iFeedrateDivider = iFeedrateDivider - 1
  Endif 

End

Public Sub StopJog()

  tmrJog.Enabled = False
  SendSerialData(sAbsolute, True)
  tgbJog.Tag = ""
  iFeedrateDivider = 20

End


Public Sub btnXpos_MouseDown()

  tgbJog.Tag = "X"
  SendSerialData(sRelative, True)
  Jog()

End

Public Sub btnXpos_MouseUp()

  StopJog()

End

Public Sub btnXneg_MouseDown()

  tgbJog.Tag = "X-"
  SendSerialData(sRelative, True)
  Jog()

End

Public Sub btnXneg_MouseUp()

  StopJog()

End

Public Sub btnYpos_MouseDown()

  tgbJog.Tag = "Y"
  SendSerialData(sRelative, True)
  Jog()

End

Public Sub btnYpos_MouseUp()

  StopJog()

End

Public Sub btnYneg_MouseDown()

  tgbJog.Tag = "Y-"
  SendSerialData(sRelative, True)
  Jog()

End

Public Sub btnYneg_MouseUp()

  StopJog()

End

Public Sub btnZpos_MouseDown()

  tgbJog.Tag = "Z"
  SendSerialData(sRelative, True)
  Jog()

End

Public Sub btnZpos_MouseUp()

  StopJog()

End

Public Sub btnZneg_MouseDown()

  tgbJog.Tag = "Z-"
  SendSerialData(sRelative, True)
  Jog()

End

Public Sub btnZneg_MouseUp()

  StopJog()

End

Public Sub tgbJog_Click()

  btnXneg.Enabled = tgbJog.Value
  btnXpos.Enabled = tgbJog.Value
  btnYneg.Enabled = tgbJog.Value
  btnYpos.Enabled = tgbJog.Value
  btnZneg.Enabled = tgbJog.Value
  btnZpos.Enabled = tgbJog.Value

  If tgbJog.Value = True Then
    SendSerialData(sRelative, True)
  Else 
    SendSerialData(sAbsolute, True)
  Endif
End

Public Sub tmrJog_Timer()

  tmrJog.Enabled = False
  Jog()

End

Public Sub jsk1_AxisChange(Id As Integer, Value As Integer)
  
  Select Id
    Case 0
      'X axis
      If Value <> 0 Then 
        tmrJsJog.Enabled = True
      Endif
    Case 1
      'Y axis
      If Value <> 0 Then 
        tmrJsJog.Enabled = True
      Endif 
  End Select
  
  If Abs(jsk1.Axis[0]) + Abs(jsk1.Axis[1]) = 0 Then 
    tmrJsJog.Enabled = False
  Endif
End

Public Sub jsk1_ButtonChange(Id As Integer, Value As Boolean)
  
  Select Id
    Case 0
      If Value = True Then
        If bButtonDown[Id] = False Then 
          bButtonDown[Id] = True
          If btnLoc3.Enabled = True Then 
            btnLoc3_Click
          Endif 
        Endif
      Else 
        bButtonDown[Id] = False
      Endif 
    Case 1
      If Value = True Then
        If bButtonDown[Id] = False Then 
          bButtonDown[Id] = True
          If tgbBed.Enabled = True Then 
            tgbBed.Value = Not tgbBed.Value
          Endif 
        Endif
      Else 
        bButtonDown[Id] = False
      Endif 
    Case 2
      If Value = True Then
        If bButtonDown[Id] = False Then 
          bButtonDown[Id] = True
          If tgbHotEnd.Enabled = True Then 
            tgbHotEnd.Value = Not tgbHotEnd.Value
          Endif 
        Endif
      Else 
        bButtonDown[Id] = False
      Endif 
    Case 3
      If Value = True Then
        If bButtonDown[Id] = False Then 
          bButtonDown[Id] = True
          If btnLoc1.Enabled = True Then 
            btnLoc1_Click
          Endif 
        Endif
      Else 
        bButtonDown[Id] = False
      Endif 
    Case 8
      If Value = True Then
        If bButtonDown[Id] = False Then 
          bButtonDown[Id] = True
          If btnLoc4.Enabled = True Then 
            btnLoc4_Click
          Endif 
        Endif
      Else 
        bButtonDown[Id] = False
      Endif 
    Case 9
      If Value = True Then
        If bButtonDown[Id] = False Then 
          bButtonDown[Id] = True
          If btnLoc2.Enabled = True Then 
            btnLoc2_Click
          Endif 
        Endif
      Else 
        bButtonDown[Id] = False
      Endif 
    Case 12
      If Value = True Then
        If bButtonDown[Id] = False Then 
          bButtonDown[Id] = True
          btnHome_Click()
        Endif
      Else 
        bButtonDown[Id] = False
      Endif 
  End Select
  
End


Public Sub tmrJsJog_Timer()

  Dim fXdist As Float
  Dim fYdist As Float
  Dim fZdist As Float
  
  tmrJsJog.Enabled = False
  
  If jsk1.Button[6] Or jsk1.Button[4] Then      'Button 4 and 6 can be used to enable movement by the joystick
    If jsk1.Button[5] Then                      'Button 5 switches from X-Y to Z axis.
      fZdist = Round(-jsk1.Axis[1] / 32767 * 3.125 / 5, -2)
      If jsk1.Button[4] Then                    'Button 4 activates fine feed
        fZdist = fZdist / 10
      Endif
      SendSerialData(sLinearMove & "Z" & fZdist & "F500", True)
      Debug sLinearMove & " Z" & fZdist & " F500"
  
    Else
      fXdist = Round(jsk1.Axis[0] / 32767 * 3.125, -2)
      fYdist = Round(-jsk1.Axis[1] / 32767 * 3.125, -2)
      If jsk1.Button[4] Then                    'Button 4 activates fine feed
        fXdist = fXdist / 10
        fYdist = fYdist / 10
      Endif
      SendSerialData(sLinearMove & "X" & fXdist & "Y" & fYdist & "F800", True)
      Debug sLinearMove & " X" & fXdist & " Y" & fYdist & " F800"
    Endif
  Endif 
  tmrJsJog.Enabled = True

End
